version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: agentstate-postgres
    environment:
      POSTGRES_DB: agentstate
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: yourpassword
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data/pgdata
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - agentstate-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d agentstate"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: agentstate-api
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:8080
      - ConnectionStrings__DefaultConnection=Host=postgres;Database=agentstate;Username=postgres;Password=yourpassword
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - agentstate-network
    volumes:
      - ./AgentStateAPI:/app/source
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  api-dev:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: agentstate-api-dev
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:5000
      - ConnectionStrings__DefaultConnection=Host=postgres;Database=agentstate;Username=postgres;Password=yourpassword
      - DOTNET_USE_POLLING_FILE_WATCHER=true
      - DOTNET_WATCH_RESTART_ON_RUDE_EDIT=true
    ports:
      - "5000:5000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - agentstate-network
    volumes:
      - .:/app/source
      - dotnet_packages:/root/.nuget/packages
    profiles:
      - dev

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: agentstate-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@agentstate.local
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    depends_on:
      - postgres
    networks:
      - agentstate-network
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    profiles:
      - tools

  redis:
    image: redis:7-alpine
    container_name: agentstate-redis
    ports:
      - "6379:6379"
    networks:
      - agentstate-network
    volumes:
      - redis_data:/data
    profiles:
      - cache

  prometheus:
    image: prom/prometheus:latest
    container_name: agentstate-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - agentstate-network
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: agentstate-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - agentstate-network
    profiles:
      - monitoring

  seq:
    image: datalust/seq:latest
    container_name: agentstate-seq
    environment:
      - ACCEPT_EULA=Y
    ports:
      - "5341:80"
    volumes:
      - seq_data:/data
    networks:
      - agentstate-network
    profiles:
      - logging

  nginx:
    image: nginx:alpine
    container_name: agentstate-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - api
    networks:
      - agentstate-network
    profiles:
      - proxy

volumes:
  postgres_data:
    driver: local
  dotnet_packages:
    driver: local
  pgadmin_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  seq_data:
    driver: local

networks:
  agentstate-network:
    driver: bridge